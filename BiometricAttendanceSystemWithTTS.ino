#include<EEPROM.h>
#include<LiquidCrystal.h>
LiquidCrystal lcd(12, 10, 5, 4, 8, 7);
#include <SoftwareSerial.h>
SoftwareSerial fingerPrint(2, 3);
#include <PCM.h>
#include <Wire.h>
#include "RTClib.h"
RTC_DS1307 rtc;
#include <PCM.h>
DateTime now;
int flag = 1;
const unsigned char sample[] PROGMEM = {

29, 129, 130, 130, 131, 132, 132, 132, 132, 131, 132, 131, 129, 129, 128, 126, 124, 123, 122, 122, 122, 122, 123, 124, 126, 127, 128, 129, 131, 133, 136, 138, 141, 143, 144, 145, 144, 144, 142, 139, 136, 134, 131, 127, 122, 117, 113, 110, 107, 105, 103, 102, 102, 103, 105, 108, 112, 116, 121, 128, 134, 140, 146, 149, 152, 154, 155, 156, 156, 156, 155, 151, 147, 142, 136, 130, 122, 112, 104, 98, 92, 89, 87, 87, 88, 90, 94, 100, 110, 121, 131, 143, 153, 163, 173, 181, 190, 197, 201, 203, 199, 192, 180, 165, 149, 130, 109, 87, 65, 44, 28, 12, 2, 0, 0, 0, 8, 25, 48, 75, 106, 140, 174, 210, 243, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 208, 156, 101, 44, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 72, 140, 206, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 227, 146, 60, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 65, 134, 207, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 248, 167, 85, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 62, 135, 207, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 231, 158, 77, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 51, 119, 186, 251, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 233, 166, 97, 25, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 28, 95, 154, 209, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 231, 164, 92, 21, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 31, 101, 158, 213, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 233, 165, 96, 27, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 62, 120, 178, 237, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 204, 126, 49, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 50, 111, 174, 234, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 214, 136, 53, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 41, 97, 151, 207, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 249, 172, 85, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 76, 148, 216, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 211, 138, 62, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 68, 142, 214, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 252, 193, 123, 49, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 52, 124, 188, 246, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 245, 179, 110, 27, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 42, 124, 190, 247, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 222, 164, 87, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 43, 134, 204, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 231, 175, 107, 23, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 23, 116, 196, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 207, 134, 46, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 48, 134, 205, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 247, 238, 240, 250, 255, 255, 255, 255, 255, 255, 255, 221, 143, 66, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 40, 127, 202, 255, 255, 255, 255, 255, 255, 255, 255, 255, 242, 208, 195, 200, 214, 245, 255, 255, 255, 255, 255, 255, 255, 211, 133, 45, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 89, 170, 243, 255, 255, 255, 255, 255, 255, 255, 255, 227, 196, 170, 169, 193, 227, 255, 255, 255, 255, 255, 255, 255, 239, 174, 77, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 92, 167, 247, 255, 255, 255, 255, 255, 255, 255, 241, 198, 163, 153, 143, 162, 190, 222, 255, 255, 255, 255, 255, 255, 255, 207, 120, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 27, 127, 206, 255, 255, 255, 255, 255, 255, 255, 255, 210, 165, 137, 130, 137, 155, 180, 211, 255, 255, 255, 255, 255, 255, 255, 202, 123, 19, 0, 0, 0, 0, 0, 0, 0, 0, 0, 65, 165, 229, 255, 255, 255, 255, 255, 255, 255, 220, 163, 136, 134, 126, 124, 140, 171, 219, 255, 255, 255, 255, 255, 255, 255, 199, 134, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 89, 190, 255, 255, 255, 255, 255, 255, 255, 204, 149, 134, 130, 126, 125, 121, 143, 217, 255, 255, 255, 255, 255, 255, 255, 255, 235, 138, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 138, 252, 255, 255, 255, 255, 255, 255, 240, 131, 67, 91, 132, 160, 161, 159, 194, 255, 255, 255, 255, 255, 255, 255, 255, 255, 197, 99, 0, 0, 0, 0, 0, 0, 0, 0, 0, 90, 188, 255, 255, 255, 255, 255, 255, 213, 75, 41, 75, 111, 156, 155, 178, 235, 255, 255, 255, 255, 255, 255, 255, 255, 255, 205, 159, 97, 61, 0, 0, 0, 0, 0, 0, 0, 0, 161, 222, 255, 255, 255, 255, 255, 151, 84, 61, 81, 87, 86, 116, 204, 255, 255, 255, 255, 255, 255, 255, 255, 255, 253, 255, 243, 238, 196, 85, 0, 0, 0, 0, 0, 0, 0, 0, 179, 255, 255, 255, 255, 255, 255, 141, 12, 0, 16, 117, 166, 179, 255, 255, 255, 255, 255, 255, 232, 228, 255, 255, 255, 255, 255, 255, 211, 132, 60, 0, 0, 0, 0, 0, 0, 0, 145, 255, 255, 255, 255, 255, 233, 62, 0, 0, 0, 121, 182, 208, 255, 255, 255, 255, 255, 146, 167, 203, 239, 243, 255, 255, 255, 255, 255, 198, 83, 0, 0, 0, 0, 0, 0, 0, 145, 255, 255, 255, 255, 255, 93, 0, 0, 0, 57, 157, 255, 255, 255, 255, 255, 255, 186, 76, 64, 164, 214, 255, 255, 255, 255, 255, 255, 162, 51, 0, 0, 0, 0, 0, 0, 0, 192, 255, 255, 255, 208, 153, 12, 0, 0, 0, 91, 237, 255, 255, 255, 255, 255, 246, 42, 0, 9, 174, 255, 255, 255, 255, 255, 255, 207, 132, 9, 0, 0, 0, 0, 0, 0, 88, 255, 255, 255, 114, 138, 43, 0, 0, 0, 86, 255, 255, 255, 255, 255, 255, 152, 3, 0, 0, 181, 255, 255, 255, 255, 255, 255, 188, 83, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 161, 104, 45, 0, 0, 0, 73, 255, 255, 255, 255, 255, 255, 135, 53, 0, 7, 227, 255, 255, 255, 255, 255, 255, 242, 45, 0, 0, 0, 0, 0, 0, 0, 70, 255, 255, 255, 54, 9, 0, 0, 0, 0, 163, 255, 255, 255, 255, 255, 255, 63, 0, 0, 52, 255, 255, 255, 255, 255, 255, 255, 144, 140, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 213, 0, 0, 0, 0, 0, 15, 255, 255, 255, 255, 255, 255, 212, 0, 0, 0, 205, 255, 255, 255, 255, 255, 255, 202, 100, 0, 0, 0, 0, 0, 0, 0, 217, 255, 255, 255, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 189, 255, 114, 0, 0, 102, 255, 255, 255, 255, 255, 255, 216, 26, 0, 0, 0, 0, 0, 0, 0, 94, 255, 255, 255, 0, 0, 0, 0, 0, 0, 195, 255, 255, 255, 255, 181, 233, 211, 126, 104, 130, 255, 255, 255, 255, 255, 255, 222, 204, 67, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 24, 0, 0, 0, 0, 0, 109, 255, 255, 255, 255, 134, 105, 243, 164, 177, 83, 249, 255, 255, 255, 255, 255, 255, 177, 33, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 21, 0, 0, 0, 0, 34, 113, 255, 255, 255, 255, 72, 76, 175, 231, 112, 50, 229, 255, 255, 255, 255, 255, 243, 223, 113, 0, 0, 0, 0, 0, 0, 176, 255, 255, 255, 0, 0, 0, 0, 15, 8, 223, 255, 255, 255, 235, 235, 102, 168, 160, 0, 115, 237, 255, 255, 255, 255, 248, 255, 255, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 80, 0, 0, 0, 0, 0, 109, 255, 255, 255, 255, 255, 238, 69, 125, 22, 83, 185, 255, 255, 255, 255, 255, 255, 245, 55, 0, 0, 0, 0, 0, 0, 255, 255, 255, 252, 0, 0, 0, 0, 0, 31, 255, 255, 255, 255, 255, 230, 57, 89, 96, 63, 147, 178, 255, 255, 255, 255, 254, 188, 109, 0, 0, 0, 0, 0, 0, 255, 255, 255, 235, 2, 0, 0, 0, 0, 30, 255, 255, 255, 255, 255, 242, 143, 131, 0, 44, 113, 216, 255, 255, 255, 255, 206, 232, 6, 0, 0, 0, 0, 0, 0, 255, 255, 255, 148, 51, 0, 0, 0, 0, 116, 215, 255, 255, 255, 255, 239, 166, 160, 100, 171, 104, 218, 255, 255, 255, 245, 173, 115, 0, 0, 0, 0, 0, 0, 67, 255, 255, 255, 106, 47, 0, 0, 0, 0, 113, 255, 255, 255, 255, 255, 255, 211, 135, 77, 63, 184, 255, 255, 255, 255, 230, 179, 80, 0, 0, 0, 0, 0, 0, 187, 255, 255, 225, 82, 45, 20, 0, 0, 40, 193, 255, 255, 255, 255, 255, 242, 127, 133, 11, 103, 206, 238, 255, 255, 255, 215, 114, 20, 0, 0, 0, 0, 0, 84, 255, 255, 227, 140, 36, 109, 21, 0, 67, 133, 255, 255, 255, 255, 255, 255, 192, 149, 109, 62, 180, 195, 231, 248, 207, 200, 104, 53, 0, 0, 0, 0, 0, 0, 200, 255, 185, 162, 132, 137, 133, 67, 66, 151, 255, 255, 255, 255, 255, 255, 255, 227, 183, 126, 145, 171, 184, 214, 191, 147, 91, 4, 0, 0, 0, 0, 0, 0, 92, 201, 197, 152, 113, 139, 158, 165, 143, 161, 235, 255, 255, 255, 255, 255, 244, 255, 255, 215, 208, 207, 176, 182, 138, 91, 44, 0, 0, 0, 0, 0, 0, 0, 14, 46, 98, 121, 163, 185, 190, 200, 164, 210, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 237, 201, 195, 154, 88, 50, 0, 0, 0, 0, 0, 0, 0, 0, 60, 47, 26, 56, 123, 185, 204, 221, 238, 255, 255, 255, 255, 255, 235, 225, 255, 254, 251, 236, 217, 177, 129, 80, 31, 0, 0, 0, 0, 0, 0, 0, 15, 40, 84, 86, 119, 148, 184, 236, 243, 255, 253, 255, 255, 255, 255, 247, 230, 223, 229, 209, 205, 164, 140, 98, 44, 30, 0, 1, 0, 0, 0, 0, 0, 7, 22, 48, 103, 169, 247, 255, 255, 255, 255, 255, 254, 236, 203, 229, 255, 255, 255, 211, 187, 179, 155, 97, 52, 26, 19, 4, 0, 0, 0, 0, 0, 0, 6, 11, 34, 45, 103, 178, 255, 255, 255, 255, 255, 255, 255, 229, 191, 172, 175, 185, 210, 220, 233, 182, 123, 48, 0, 2, 9, 21, 0, 0, 0, 0, 0, 33, 43, 41, 31, 52, 125, 185, 255, 255, 255, 255, 255, 255, 255, 249, 195, 152, 150, 158, 188, 205, 206, 177, 148, 87, 63, 45, 41, 39, 19, 0, 0, 0, 0, 16, 38, 45, 45, 63, 81, 104, 145, 185, 207, 224, 222, 222, 209, 196, 169, 161, 149, 155, 178, 197, 205, 195, 173, 141, 130, 110, 96, 88, 87, 86, 79, 82, 80, 57, 48, 46, 75, 93, 111, 117, 127, 139, 149, 166, 166, 163, 167, 157, 142, 168, 169, 164, 159, 154, 158, 171, 180, 168, 136, 114, 105, 124, 132, 112, 108, 94, 98, 107, 98, 103, 83, 91, 114, 117, 140, 134, 141, 153, 145, 135, 118, 132, 149, 151, 151, 120, 127, 140, 147, 163, 150, 148, 139, 130, 131, 124, 121, 118, 116, 115, 107, 119, 129, 145, 144, 122, 113, 105, 118, 127, 118, 112, 122, 129, 127, 127, 117, 108, 106, 112, 115, 121, 129, 137, 140, 142, 136, 127, 128, 127, 126, 118, 114, 115, 123, 131, 129, 136, 140, 137, 138, 123, 105, 100, 104, 115, 118, 124, 131, 124, 125, 122, 116, 116, 115, 118, 121, 126, 137, 143, 149, 150, 140, 131, 122, 121, 127, 128, 128, 132, 142, 146, 145, 146, 136, 126, 125, 111, 111, 120, 120, 124, 124, 121, 123, 132, 141, 135, 129, 126, 123, 128, 133, 134, 138, 137, 140, 140, 138, 134, 129, 137, 138, 136, 134, 134, 140, 142, 136, 129, 126, 125, 122, 119, 120, 120, 125, 130, 132, 134, 133, 133, 140, 142, 138, 138, 135, 138, 137, 134, 134, 130, 131, 131, 132, 132, 130, 132, 131, 131, 130, 123, 122, 122, 123, 123, 123, 123, 123, 124, 124, 125, 129, 132, 133, 131, 129, 130, 132, 132, 131, 129, 131, 134, 132, 128, 124, 122, 124, 124, 123, 124, 124, 125, 124, 122, 120, 118, 116, 116, 118, 120, 121, 121, 123, 124, 126, 127, 124, 122, 122, 125, 127, 124, 123, 123, 124, 123, 121, 121, 119, 118, 118, 118, 119, 119, 120, 121, 120, 119, 118, 117, 117, 116, 117, 118, 121, 124, 126, 128, 128, 128, 127, 127, 128, 129, 128, 126, 126, 127, 127, 127, 126, 125, 123, 123, 124, 124, 123, 123, 125, 125, 125, 124, 125, 124, 122, 120, 121, 123, 123, 124, 126, 130, 131, 132, 132, 134, 135, 134, 132, 132, 134, 135, 135, 133, 131, 130, 132, 133, 133, 131, 133, 135, 134, 132, 132, 132, 133, 132, 130, 130, 131, 132, 133, 132, 132, 134, 137, 138, 137, 135, 137, 138, 137, 137, 138, 138, 136, 136, 135, 134, 135, 134, 132, 133, 135, 134, 131, 131, 134, 136, 132, 128, 128, 129, 129, 131, 129, 128, 128, 128, 128, 129, 128, 129, 131, 131, 129, 128, 129, 129, 129, 130, 130, 129, 127, 129, 129, 128, 127, 128, 127, 128, 129, 127, 125, 125, 127, 128, 125, 125, 126, 126, 128, 130, 129, 129, 129, 125, 122, 125, 124, 122, 122, 121, 123, 123, 124, 123, 122, 122, 122, 120, 120, 122, 123, 122, 122, 121, 122, 127, 128, 125, 123, 122, 123, 124, 126, 126, 128, 132, 132, 127, 120, 116, 122, 130, 129, 126, 124, 124, 127, 126, 125, 124, 126, 128, 127, 121, 119, 125, 129, 125, 129, 134, 129, 126, 126, 125, 128, 129, 123, 123, 130, 132, 129, 122, 121, 130, 134, 130, 125, 123, 123, 127, 130, 127, 125, 126, 122, 117, 122, 149, 176, 158, 104, 101, 166, 213, 175, 100, 103, 185, 202, 100, 12, 59, 179, 222, 150, 67, 84, 174, 207, 133, 63, 99, 181, 193, 129, 82, 109, 163, 171, 119, 79, 111, 154, 140, 100, 90, 120, 153, 143, 102, 94, 130, 149, 122, 94, 108, 143, 144, 105, 87, 106, 132, 141, 119, 101, 113, 128, 121, 109, 114, 125, 135, 128, 106, 102, 108, 111, 119, 121, 123, 117, 102, 100, 101, 116, 145, 149, 123, 108, 107, 116, 139, 146, 126, 105, 115, 236, 255, 217, 0, 0, 104, 239, 157, 16, 37, 165, 217, 127, 44, 107, 210, 196, 89, 53, 140, 200, 148, 62, 72, 170, 202, 126, 57, 89, 166, 170, 114, 105, 168, 204, 173, 129, 102, 115, 147, 157, 160, 149, 145, 139, 74, 28, 82, 159, 153, 87, 89, 173, 218, 176, 119, 155, 255, 255, 185, 63, 8, 66, 149, 158, 103, 73, 139, 206, 178, 129, 119, 135, 150, 130, 115, 126, 126, 108, 70, 61, 137, 197, 150, 87, 100, 159, 198, 173, 126, 120, 145, 142, 80, 46, 96, 141, 131, 95, 86, 140, 193, 166, 102, 100, 135, 126, 103, 112, 133, 144, 129, 116, 156, 194, 176, 152, 115, 96, 130, 142, 112, 66, 76, 145, 152, 124, 122, 133, 158, 157, 132, 107, 97, 120, 132, 123, 114, 105, 98, 107, 123, 134, 140, 119, 108, 132, 152, 174, 135, 56, 82, 154, 168, 126, 71, 85, 132, 148, 136, 112, 126, 148, 118, 104, 115, 122, 147, 112, 75, 130, 172, 162, 106, 73, 129, 140, 105, 96, 98, 134, 128, 85, 99, 116, 125, 145, 133, 112, 93, 96, 132, 118, 77, 97, 130, 138, 133, 125, 123, 115, 113, 120, 115, 130, 163, 167, 157, 145, 126, 134, 146, 142, 149, 155, 160, 162, 171, 195, 174, 141, 156, 173, 170, 138, 107, 128, 139, 117, 118, 101, 76, 101, 105, 84, 71, 59, 84, 84, 40, 22, 11, 28, 51, 21, 4, 29, 49, 62, 93, 126, 155, 187, 195, 199, 236, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 205, 185, 178, 143, 100, 63, 33, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 61, 120, 214, 255, 255, 255, 126, 106, 141, 176, 225, 195, 215, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 204, 131, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 157, 159, 133, 117, 176, 255, 127, 0, 19, 135, 255, 255, 72, 175, 255, 255, 245, 88, 120, 255, 228, 157, 200, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 237, 179, 172, 132, 48, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 38, 255, 255, 196, 95, 255, 255, 2, 0, 0, 164, 255, 151, 103, 255, 255, 255, 138, 0, 92, 186, 207, 217, 183, 255, 255, 255, 255, 255, 255, 255, 255, 218, 236, 255, 255, 255, 255, 255, 255, 255, 239, 161, 110, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 178, 255, 222, 26, 96, 34, 0, 0, 27, 255, 255, 205, 235, 255, 229, 183, 0, 0, 109, 176, 239, 243, 255, 255, 255, 255, 208, 204, 255, 255, 235, 194, 255, 255, 255, 255, 255, 255, 255, 255, 255, 163, 164, 107, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 31, 0, 70, 0, 0, 0, 225, 255, 255, 199, 202, 250, 255, 213, 0, 0, 194, 255, 255, 185, 179, 255, 255, 219, 108, 102, 255, 255, 206, 170, 152, 255, 255, 255, 255, 255, 255, 255, 211, 241, 255, 252, 224, 30, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 119, 255, 255, 72, 0, 88, 30, 0, 0, 60, 255, 255, 255, 194, 168, 219, 255, 180, 74, 106, 150, 255, 199, 84, 216, 255, 201, 95, 49, 131, 209, 225, 249, 254, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 254, 238, 220, 117, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 251, 0, 0, 37, 42, 0, 0, 83, 255, 255, 255, 143, 136, 236, 196, 40, 18, 91, 229, 255, 149, 123, 175, 243, 222, 127, 96, 106, 205, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 252, 255, 172, 93, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 219, 255, 235, 0, 0, 6, 30, 18, 15, 114, 255, 255, 177, 131, 126, 206, 150, 48, 67, 104, 255, 255, 203, 111, 151, 224, 231, 218, 184, 178, 214, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 140, 120, 96, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 127, 139, 55, 0, 0, 16, 0, 0, 0, 186, 255, 255, 255, 114, 192, 254, 135, 92, 128, 255, 255, 239, 175, 193, 232, 236, 115, 116, 101, 156, 255, 223, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 212, 72, 38, 41, 29, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 112, 149, 78, 0, 0, 0, 0, 102, 91, 195, 255, 255, 255, 195, 218, 196, 163, 148, 158, 226, 255, 253, 197, 147, 115, 203, 255, 255, 182, 117, 174, 250, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 106, 71, 18, 41, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 129, 115, 24, 0, 0, 0, 0, 60, 47, 191, 255, 255, 252, 163, 178, 163, 178, 155, 107, 189, 255, 225, 244, 141, 222, 255, 255, 255, 171, 148, 216, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 246, 123, 35, 9, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 58, 26, 0, 0, 0, 0, 80, 57, 32, 159, 255, 255, 255, 178, 196, 193, 255, 200, 134, 172, 255, 255, 255, 242, 248, 255, 255, 255, 209, 166, 225, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 202, 162, 165, 60, 65, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 99, 0, 0, 0, 0, 90, 121, 75, 116, 241, 255, 255, 255, 255, 223, 200, 193, 188, 237, 255, 255, 255, 255, 255, 255, 209, 160, 159, 234, 253, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 221, 147, 101, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128, 107, 0, 0, 0, 50, 136, 108, 115, 205, 255, 255, 255, 239, 201, 252, 255, 245, 255, 158, 216, 255, 255, 255, 255, 247, 198, 208, 254, 181, 204, 248, 255, 255, 255, 255, 255, 255, 255, 255, 255, 232, 255, 255, 247, 208, 140, 132, 88, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 54, 36, 0, 0, 0, 51, 144, 168, 185, 211, 255, 255, 255, 255, 193, 206, 255, 255, 255, 250, 249, 255, 255, 255, 242, 255, 212, 206, 198, 151, 195, 210, 255, 255, 255, 255, 255, 255, 255, 255, 222, 216, 246, 255, 247, 205, 121, 53, 69, 24, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 61, 123, 11, 0, 0, 45, 133, 182, 240, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 220, 214, 255, 255, 255, 214, 169, 169, 197, 229, 241, 254, 255, 255, 255, 255, 255, 255, 240, 230, 242, 255, 255, 255, 185, 109, 65, 53, 39, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 77, 143, 0, 0, 0, 93, 213, 235, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 238, 207, 230, 237, 255, 209, 198, 167, 144, 150, 156, 200, 216, 204, 229, 226, 248, 248, 251, 255, 247, 242, 221, 246, 250, 246, 208, 163, 132, 63, 54, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 97, 109, 46, 32, 39, 123, 148, 212, 255, 255, 255, 255, 255, 255, 255, 255, 255, 253, 233, 236, 253, 250, 217, 209, 210, 193, 170, 126, 114, 121, 152, 166, 164, 168, 181, 226, 242, 247, 230, 218, 222, 235, 249, 251, 255, 250, 223, 176, 139, 105, 75, 39, 32, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 102, 123, 86, 67, 67, 115, 180, 224, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 246, 222, 211, 219, 218, 210, 152, 140, 138, 155, 145, 135, 129, 155, 169, 185, 164, 172, 197, 216, 230, 191, 192, 202, 251, 246, 248, 223, 207, 194, 143, 124, 100, 113, 116, 62, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 14, 51, 95, 128, 159, 190, 240, 255, 255, 255, 255, 255, 253, 232, 215, 213, 203, 221, 219, 195, 166, 136, 138, 153, 151, 163, 147, 141, 139, 124, 135, 137, 153, 154, 157, 172, 190, 207, 221, 246, 255, 255, 255, 254, 237, 220, 213, 205, 192, 177, 143, 112, 73, 33, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 74, 134, 183, 236, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 246, 225, 211, 199, 183, 165, 141, 136, 123, 119, 123, 128, 135, 125, 127, 148, 174, 197, 205, 217, 230, 244, 255, 255, 255, 255, 255, 250, 249, 232, 202, 157, 108, 76, 45, 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 47, 108, 137, 179, 212, 247, 255, 255, 255, 255, 255, 255, 255, 255, 255, 247, 234, 215, 200, 181, 161, 150, 143, 135, 134, 132, 134, 138, 140, 135, 138, 153, 174, 191, 215, 218, 230, 235, 255, 255, 255, 255, 255, 254, 243, 224, 198, 163, 125, 102, 66, 31, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 22, 77, 119, 144, 185, 226, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 238, 227, 212, 199, 182, 161, 151, 143, 136, 137, 140, 140, 131, 126, 139, 160, 176, 188, 203, 217, 242, 255, 255, 255, 255, 255, 255, 255, 248, 220, 194, 155, 119, 90, 63, 42, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 42, 82, 132, 169, 219, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 225, 210, 189, 188, 190, 184, 173, 152, 139, 133, 136, 146, 152, 158, 151, 142, 142, 160, 194, 211, 211, 207, 214, 232, 248, 250, 246, 227, 220, 212, 200, 175, 143, 113, 81, 46, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 73, 139, 183, 205, 225, 241, 255, 255, 255, 255, 255, 255, 255, 251, 243, 241, 231, 236, 219, 200, 185, 164, 172, 183, 178, 171, 151, 149, 155, 151, 161, 160, 163, 176, 176, 182, 186, 190, 202, 193, 187, 179, 172, 173, 161, 142, 118, 90, 70, 50, 27, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 40, 82, 126, 158, 170, 190, 218, 240, 255, 255, 255, 255, 255, 255, 252, 252, 252, 249, 238, 230, 219, 209, 207, 201, 192, 184, 182, 185, 182, 173, 170, 169, 179, 185, 184, 180, 178, 180, 185, 167, 148, 126, 99, 83, 61, 33, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 32, 86, 135, 158, 194, 231, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 225, 194, 184, 176, 174, 169, 158, 144, 126, 119, 131, 148, 158, 150, 151, 164, 188, 208, 215, 216, 215, 225, 238, 242, 240, 233, 224, 215, 200, 178, 160, 141, 121, 109, 95, 80, 58, 37, 25, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 24, 57, 81, 109, 141, 164, 196, 224, 244, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 252, 237, 231, 233, 235, 235, 230, 220, 209, 199, 194, 187, 171, 153, 131, 112, 94, 80, 61, 36, 17, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 36, 81, 121, 157, 192, 223, 246, 255, 255, 255, 255, 255, 255, 255, 255, 254, 248, 245, 236, 211, 194, 191, 186, 178, 174, 167, 158, 153, 163, 172, 169, 167, 178, 190, 206, 213, 215, 218, 229, 245, 244, 233, 223, 212, 207, 201, 182, 151, 119, 99, 83, 64, 43, 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 17, 45, 83, 119, 159, 184, 194, 212, 229, 243, 255, 255, 255, 255, 254, 247, 244, 245, 234, 221, 223, 218, 209, 207, 203, 198, 193, 193, 197, 198, 202, 197, 194, 198, 200, 199, 188, 184, 184, 170, 155, 139, 122, 104, 80, 66, 48, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15, 57, 102, 129, 156, 191, 212, 239, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 246, 240, 234, 222, 218, 213, 206, 201, 193, 187, 182, 177, 174, 173, 175, 172, 170, 168, 166, 172, 169, 158, 152, 145, 137, 122, 104, 84, 60, 47, 32, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 26, 65, 98, 122, 146, 172, 202, 228, 248, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 253, 247, 238, 234, 232, 232, 224, 214, 216, 211, 204, 206, 204, 198, 192, 184, 175, 161, 144, 133, 125, 115, 95, 66, 51, 44, 33, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15, 45, 80, 107, 129, 150, 177, 198, 214, 228, 241, 252, 255, 255, 255, 255, 255, 255, 254, 255, 255, 252, 241, 233, 230, 228, 222, 222, 224, 218, 206, 194, 193, 202, 204, 196, 178, 162, 150, 141, 125, 105, 87, 80, 77, 62, 45, 28, 12, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 22, 33, 42, 56, 76, 91, 106, 123, 136, 149, 164, 180, 191, 198, 207, 217, 227, 235, 246, 249, 247, 244, 241, 251, 255, 251, 248, 240, 238, 237, 234, 229, 222, 212, 210, 205, 198, 185, 158, 147, 133, 123, 110, 94, 86, 75, 63, 52, 44, 39, 29, 23, 26, 27, 35, 33, 32, 28, 26, 37, 50, 58, 58, 53, 46, 53, 62, 69, 71, 78, 93, 108, 124, 125, 121, 124, 140, 163, 179, 182, 188, 198, 216, 232, 235, 240, 242, 243, 241, 236, 227, 225, 224, 222, 213, 200, 196, 194, 185, 168, 150, 133, 123, 113, 105, 101, 101, 87, 74, 68, 73, 71, 56, 44, 37, 41, 42, 43, 35, 33, 26, 25, 25, 21, 26, 26, 34, 46, 55, 54, 55, 67, 82, 98, 108, 109, 111, 116, 126, 139, 157, 168, 173, 174, 180, 185, 191, 185, 194, 208, 213, 207, 179, 176, 189, 209, 207, 202, 198, 191, 186, 186, 180, 163, 156, 156, 162, 161, 146, 128, 122, 115, 114, 109, 99, 92, 91, 91, 83, 74, 57, 57, 79, 74, 76, 67, 77, 80, 69, 62, 58, 80, 91, 95, 98, 104, 108, 117, 113, 121, 138, 147, 148, 152, 161, 186, 189, 167, 158, 164, 196, 204, 190, 179, 179, 188, 183, 167, 161, 176, 192, 178, 169, 153, 157, 156, 156, 152, 144, 159, 161, 144, 123, 129, 144, 147, 126, 127, 132, 141, 128, 114, 114, 118, 128, 112, 91, 88, 107, 113, 102, 84, 81, 94, 105, 87, 74, 77, 100, 124, 116, 109, 114, 129, 123, 114, 109, 112, 133, 147, 152, 140, 132, 142, 141, 140, 133, 137, 140, 146, 150, 146, 149, 140, 143, 139, 143, 141, 135, 132, 119, 123, 136, 136, 131, 119, 133, 146, 133, 119, 100, 104, 114, 118, 109, 97, 115, 131, 128, 108, 94, 111, 121, 128, 111, 104, 125, 132, 132, 110, 108, 123, 130, 135, 120, 128, 135, 141, 133, 117, 130, 139, 146, 135, 127, 126, 146, 141, 130, 126, 121, 135, 130, 129, 131, 135, 141, 126, 125, 123, 120, 131, 117, 125, 133, 144, 148, 133, 124, 123, 130, 135, 130, 122, 133, 137, 143, 129, 118, 124, 127, 135, 129, 127, 128, 131, 132, 121, 121, 124, 139, 144, 138, 134, 123, 128, 128, 130, 135, 136, 140, 142, 138, 134, 129, 126, 137, 133, 137, 136, 134, 140, 128, 131, 129, 128, 130, 135, 136, 128, 123, 126, 133, 116, 112, 119, 124, 126, 120, 123, 123, 125, 124, 122, 123, 121, 126, 118, 122, 123, 125, 128, 125, 132, 126, 121, 116, 115, 122, 128, 129, 122, 124, 130, 128, 124, 118, 120, 128, 131, 125, 121, 122, 121, 129, 130, 134, 129, 128, 126, 126, 128, 120, 121, 122, 127, 131, 132, 129, 124, 126, 130, 125, 116, 116, 122, 125, 124, 118, 121, 126, 125, 117, 117, 125, 132, 129, 121, 125, 128, 130, 127, 124, 132, 143, 142, 135, 128, 135, 141, 138, 133, 133, 138, 141, 141, 132, 128, 128, 132, 135, 133, 132, 131, 132, 133, 127, 124, 128, 136, 132, 127, 131, 132, 132, 126, 124, 123, 130, 132, 129, 127, 128, 130, 129, 127, 126, 127, 127, 126, 123, 126, 128, 128, 125, 127, 131, 131, 129, 122, 126, 131, 131, 131, 131, 135, 132, 128, 123, 126, 129, 129, 130, 128, 134, 131, 129, 128, 127, 131, 130, 129, 128, 131, 135, 134, 130, 127, 132, 131, 127, 125, 125, 129, 129, 126, 124, 126, 125, 126, 124, 124, 125, 124, 123, 124, 124, 126, 125, 122, 117, 116, 118, 118, 118, 116, 120, 123, 123, 120, 117, 122, 125, 126, 125, 125, 126, 126, 126, 125, 126, 127, 126, 125, 128, 129, 128, 123, 124, 127, 129, 129, 124, 124, 127, 126, 124, 122, 125, 127, 128, 129, 128, 127, 129, 129, 127, 128, 127, 128, 129, 128, 128, 126, 126, 127, 128, 128, 127, 126, 127, 128, 128, 127, 127, 127, 126, 127, 127, 127, 125, 126, 127, 128, 128, 127, 129, 129, 128, 128, 127, 128, 128, 127, 127, 128,
};


#include "Adafruit_Fingerprint.h"
uint8_t id;
Adafruit_Fingerprint finger = Adafruit_Fingerprint(&fingerPrint);

#define enroll A0
#define del A1
#define up A2
#define down A3
#define indFinger 7
int Contrast = 60;
#define buzzer 9
#define records 4  // 5 for 5 user
int user1,user2,user3,user4,user5;

void setup()
{
    
    delay(1000);
    analogWrite(6, Contrast);
    lcd.begin(16,2);
    Serial.begin(9600);
    pinMode(enroll, INPUT_PULLUP);
    pinMode(up, INPUT_PULLUP);
    pinMode(down, INPUT_PULLUP);
    pinMode(del, INPUT_PULLUP);
    pinMode(buzzer, OUTPUT);
    pinMode(indFinger, OUTPUT);
    digitalWrite(buzzer, LOW);
    if(digitalRead(enroll) == 1)
    {
      digitalWrite(buzzer, HIGH);
      delay(500);
      digitalWrite(buzzer, LOW);
      lcd.clear();
      lcd.print("Please wait");
      lcd.setCursor(0,1);
      lcd.print("Downloading Data");

      Serial.println("Please wait");
      Serial.println("Downloding Data..");
      Serial.println();

      Serial.print("S.No.         ");
      for(int i=0;i<records;i++)
      {
              digitalWrite(buzzer, HIGH);
      delay(500);
      digitalWrite(buzzer, LOW);
        Serial.print("         User ID");
        Serial.print(i+1);
        Serial.print("                   ");
      }
      Serial.println();
      int eepIndex=0;
      for(int i=0;i<30;i++)
      {
        if(i+1<10)
        Serial.print('0');
        Serial.print(i+1);
        Serial.print("          ");
        eepIndex=(i*7);
        download(eepIndex);
        eepIndex=(i*7)+210;
        download(eepIndex);
        eepIndex=(i*7)+420;
        download(eepIndex);
        eepIndex=(i*7)+630;
        download(eepIndex);
      //  eepIndex=(i*7)+840;   // 5th user
      //  download(eepIndex);
        Serial.println();
      }
    }
    if(digitalRead(del) == 1)
    {
      lcd.clear();
      lcd.print("Please Wait");
      lcd.setCursor(0,1);
      lcd.print("Reseting.....");
      for(int i=1000;i<1005;i++)
      EEPROM.write(i,0);
      for(int i=0;i<841;i++)
      EEPROM.write(i, 0xff);
      lcd.clear();
      lcd.print("System Reset");
      delay(1000);
    }

    
    lcd.clear();
    lcd.print("   Attendance   ");
    lcd.setCursor(0,1);
    lcd.print("     System     ");
    delay(2000);
          digitalWrite(buzzer, HIGH);
      delay(500);
      digitalWrite(buzzer, LOW);
  for(int i=1000;i<1000+records;i++)
  {
    if(EEPROM.read(i) == 0xff)
        EEPROM.write(i,0);
   }

    finger.begin(57600);
    Serial.begin(9600);
    lcd.clear();
    lcd.print("Finding Module");
    lcd.setCursor(0,1);
    delay(1000);
    if (finger.verifyPassword())
    {
      Serial.println("Found fingerprint sensor!");
      lcd.clear();
      lcd.print("Found Module ");
      delay(1000);
    }
    else
    {
    Serial.println("Did not find fingerprint sensor :(");
    lcd.clear();
    lcd.print("module not Found");
    lcd.setCursor(0,1);
    lcd.print("Check Connections");
    while (1);
    }

     if (! rtc.begin())
       Serial.println("Couldn't find RTC");
      //rtc.adjust(DateTime(F(__DATE__), F(__TIME__)));

    if (! rtc.isrunning())
    {
    Serial.println("RTC is NOT running!");
    // following line sets the RTC to the date & time this sketch was compiled
       rtc.adjust(DateTime(F(__DATE__), F(__TIME__)));
    // This line sets the RTC with an explicit date & time, for example to set
    // January 21, 2014 at 3am you would call:
    // rtc.adjust(DateTime(2014, 1, 21, 3, 0, 0));
    }

 user1=EEPROM.read(1000);
  user2=EEPROM.read(1001);
   user3=EEPROM.read(1002); 
   user4=EEPROM.read(1003);
    user5=EEPROM.read(1004);
    lcd.clear();
    digitalWrite(indFinger, HIGH);
    
}

void loop()
{
    lcd.clear();
    now = rtc.now();
    //rtc.adjust(DateTime(F(__DATE__), F(__TIME__)));
    //rtc.adjust(DateTime(now.unixtime()+10));
    
    //rtc.adjust(DateTime(__DATE__, __TIME__));
    //DateTime t = DateTime(rtc.now().unixtime()+7);
    //rtc.adjust(t);
    lcd.print("Time->");
    lcd.print(now.hour(), DEC);
    lcd.print(':');
    lcd.print(now.minute(), DEC);
    lcd.print(':');
    lcd.print(now.second(), DEC);
    lcd.print("    ");
    lcd.setCursor(0,1);
    lcd.print("Date->");
    lcd.print(now.day(), DEC);
    lcd.print('/');
    lcd.print(now.month(), DEC);
    lcd.print('/');
    lcd.print(now.year(), DEC);
    lcd.print("     ");
    delay(500);
    int result=getFingerprintIDez();
    if(result>0)
    {
              digitalWrite(indFinger, LOW);
              digitalWrite(buzzer, HIGH);
              delay(100);
              digitalWrite(buzzer, LOW);
              lcd.clear();
              lcd.print("ID:");
              lcd.print(result);
              lcd.setCursor(0,1);
              lcd.print("Please Wait....");
              delay(1000);
              attendance(result);
              lcd.clear();
              lcd.print("Attendance ");
              lcd.setCursor(0,1);
              lcd.print("Registered");
           
                startPlayback(sample, sizeof(sample));
              
              delay(1000);
        digitalWrite(indFinger, HIGH);
        return;
 }
 checkKeys();
 delay(300);
}

//     dmyyhms - 7 bytes
void attendance(int id)
{
  int user=0,eepLoc=0;
  if(id == 1)
  {
    eepLoc=0;
    user=user1++;
  }
  else if(id == 2)
  {
    eepLoc=210;
    user=user2++;
  }
  else if(id == 3)
  {
    eepLoc=420;
    user=user3++;
  }
  else if(id == 4)
  {
    eepLoc=630;
    user=user4++;
  }
  /*else if(id == 5)   // fifth user
  {
    eepLoc=840;
    user=user5++;
  }*/
  else 
  return;
  
    int eepIndex=(user*7)+eepLoc;
    EEPROM.write(eepIndex++, now.hour());
    EEPROM.write(eepIndex++, now.minute());
    EEPROM.write(eepIndex++, now.second());
    EEPROM.write(eepIndex++, now.day());
    EEPROM.write(eepIndex++, now.month());
    EEPROM.write(eepIndex++, now.year()>>8 );
    EEPROM.write(eepIndex++, now.year());

    EEPROM.write(1000,user1);
    EEPROM.write(1001,user2);
    EEPROM.write(1002,user3);
    EEPROM.write(1003,user4);
  //  EEPROM.write(4,user5);   // figth user
}

void checkKeys()
{
   if(digitalRead(enroll) == 0)
   {
    lcd.clear();
    lcd.print("Please Wait");
    delay(1000);
    while(digitalRead(enroll) == 0);
    Enroll();
   }

   else if(digitalRead(del) == 0)
   {
    lcd.clear();
    lcd.print("Please Wait");
    delay(1000);
    delet();
   }
}

void Enroll()
{
   int count=1;
   lcd.clear();
   lcd.print("Enter Finger ID:");

   while(1)
   {
    lcd.setCursor(0,1);
     lcd.print(count);
     if(digitalRead(up) == 0)
     {
       count++;
       if(count>records)
       count=1;
       delay(500);
     }

     else if(digitalRead(down) == 0)
     {
       count--;
       if(count<1)
       count=records;
       delay(500);
     }
     else if(digitalRead(del) == 0)
     {
          id=count;
          getFingerprintEnroll();
          for(int i=0;i<records;i++)
          {
            if(EEPROM.read(i) != 0xff)
            {
              EEPROM.write(i, id);
              break;
            }
          }
          return;
     }

       else if(digitalRead(enroll) == 0)
     {
          return;
     }
 }
}

void delet()
{
   int count=1;
   lcd.clear();
   lcd.print("Enter Finger ID");

   while(1)
   {
    lcd.setCursor(0,1);
     lcd.print(count);
     if(digitalRead(up) == 0)
     {
       count++;
       if(count>records)
       count=1;
       delay(500);
     }

     else if(digitalRead(down) == 0)
     {
       count--;
       if(count<1)
       count=records;
       delay(500);
     }
     else if(digitalRead(del) == 0)
     {
          id=count;
          deleteFingerprint(id);
          for(int i=0;i<records;i++)
          {
            if(EEPROM.read(i) == id)
            {
              EEPROM.write(i, 0xff);
              break;
            }
          }
          return;
     }

       else if(digitalRead(enroll) == 0)
     {
          return;
     }
 }
}

uint8_t getFingerprintEnroll()
{
  int p = -1;
  lcd.clear();
  lcd.print("finger ID:");
  lcd.print(id);
  lcd.setCursor(0,1);
  lcd.print("Place Finger");
  delay(2000);
  while (p != FINGERPRINT_OK)
  {
    p = finger.getImage();
    switch (p)
    {
    case FINGERPRINT_OK:
      Serial.println("Image taken");
      lcd.clear();
      lcd.print("Image taken");
      break;
    case FINGERPRINT_NOFINGER:
      Serial.println("No Finger");
      lcd.clear();
      lcd.print("No Finger");
      break;
    case FINGERPRINT_PACKETRECIEVEERR:
      Serial.println("Communication error");
      lcd.clear();
      lcd.print("Comm Error");
      break;
    case FINGERPRINT_IMAGEFAIL:
      Serial.println("Imaging error");
      lcd.clear();
      lcd.print("Imaging Error");
      break;
    default:
      Serial.println("Unknown error");
       lcd.clear();
      lcd.print("Unknown Error");
      break;
    }
  }

  // OK success!

  p = finger.image2Tz(1);
  switch (p) {
    case FINGERPRINT_OK:
      Serial.println("Image converted");
      lcd.clear();
      lcd.print("Image converted");
      break;
    case FINGERPRINT_IMAGEMESS:
      Serial.println("Image too messy");
       lcd.clear();
       lcd.print("Image too messy");
      return p;
    case FINGERPRINT_PACKETRECIEVEERR:
      Serial.println("Communication error");
            lcd.clear();
      lcd.print("Comm Error");
      return p;
    case FINGERPRINT_FEATUREFAIL:
      Serial.println("Could not find fingerprint features");
            lcd.clear();
      lcd.print("Feature Not Found");
      return p;
    case FINGERPRINT_INVALIDIMAGE:
      Serial.println("Could not find fingerprint features");
                  lcd.clear();
      lcd.print("Feature Not Found");
      return p;
    default:
      Serial.println("Unknown error");
                  lcd.clear();
      lcd.print("Unknown Error");
      return p;
  }

  Serial.println("Remove finger");
  lcd.clear();
  lcd.print("Remove Finger");
  delay(2000);
  p = 0;
  while (p != FINGERPRINT_NOFINGER) {
    p = finger.getImage();
  }
  Serial.print("ID "); Serial.println(id);
  p = -1;
  Serial.println("Place same finger again");
   lcd.clear();
      lcd.print("Place Finger");
      lcd.setCursor(0,1);
      lcd.print("   Again");
      delay(1000);
  while (p != FINGERPRINT_OK) {
    p = finger.getImage();
    switch (p) {
    case FINGERPRINT_OK:
      Serial.println("Image taken");
      break;
    case FINGERPRINT_NOFINGER:
      Serial.print(".");
      break;
    case FINGERPRINT_PACKETRECIEVEERR:
      Serial.println("Communication error");
      break;
    case FINGERPRINT_IMAGEFAIL:
      Serial.println("Imaging error");
      break;
    default:
      Serial.println("Unknown error");
      return;
    }
  }

  // OK success!

  p = finger.image2Tz(2);
  switch (p) {
    case FINGERPRINT_OK:
      Serial.println("Image converted");
      break;
    case FINGERPRINT_IMAGEMESS:
      Serial.println("Image too messy");
      return p;
    case FINGERPRINT_PACKETRECIEVEERR:
      Serial.println("Communication error");
      return p;
    case FINGERPRINT_FEATUREFAIL:
      Serial.println("Could not find fingerprint features");
      return p;
    case FINGERPRINT_INVALIDIMAGE:
      Serial.println("Could not find fingerprint features");
      return p;
    default:
      Serial.println("Unknown error");
      return p;
  }

  // OK converted!
  Serial.print("Creating model for #");  Serial.println(id);

  p = finger.createModel();
  if (p == FINGERPRINT_OK) {
    Serial.println("Prints matched!");
  } else if (p == FINGERPRINT_PACKETRECIEVEERR) {
    Serial.println("Communication error");
    return p;
  } else if (p == FINGERPRINT_ENROLLMISMATCH) {
    Serial.println("Fingerprints did not match");
    return p;
  } else {
    Serial.println("Unknown error");
    return p;
  }

  Serial.print("ID "); Serial.println(id);
  p = finger.storeModel(id);
  if (p == FINGERPRINT_OK) {
    Serial.println("Stored!");
    lcd.clear();
    lcd.print("Stored!");
    delay(2000);
    lcd.clear();
  } else if (p == FINGERPRINT_PACKETRECIEVEERR) {
    Serial.println("Communication error");
    return p;
  } else if (p == FINGERPRINT_BADLOCATION) {
    Serial.println("Could not store in that location");
    return p;
  } else if (p == FINGERPRINT_FLASHERR) {
    Serial.println("Error writing to flash");
    return p;
  }
  else {
    Serial.println("Unknown error");
    return p;
  }
}

int getFingerprintIDez()
{
  uint8_t p = finger.getImage();

  if (p != FINGERPRINT_OK)
  return -1;

  p = finger.image2Tz();
  if (p != FINGERPRINT_OK)
  return -1;

  p = finger.fingerFastSearch();
  if (p != FINGERPRINT_OK)
  {
   lcd.clear();
   lcd.print("Finger Not Found");
   lcd.setCursor(0,1);
   lcd.print("Try Later");
   delay(2000);
  return -1;
  }
  // found a match!
  Serial.print("Found ID #");
  Serial.print(finger.fingerID);
  return finger.fingerID;
}

uint8_t deleteFingerprint(uint8_t id)
{
  uint8_t p = -1;
  lcd.clear();
  lcd.print("Please wait");
  p = finger.deleteModel(id);
  if (p == FINGERPRINT_OK)
  {
    Serial.println("Deleted!");
    lcd.clear();
    lcd.print("Finger Deleted");
    lcd.setCursor(0,1);
    lcd.print("Successfully");
    delay(1000);
  }

  else
  {
    Serial.print("Something Wrong");
    lcd.clear();
    lcd.print("Something Wrong");
    lcd.setCursor(0,1);
    lcd.print("Try Again Later");
    delay(2000);
    return p;
  }
}

void download(int eepIndex)
{
            
            if(EEPROM.read(eepIndex) != 0xff)
            {
              Serial.print("T->");
              if(EEPROM.read(eepIndex)<10)
              Serial.print('0');
              Serial.print(EEPROM.read(eepIndex++));
              Serial.print(':');  
              if(EEPROM.read(eepIndex)<10)
              Serial.print('0');
              Serial.print(EEPROM.read(eepIndex++));
              Serial.print(':'); 
              if(EEPROM.read(eepIndex)<10)
              Serial.print('0');
              Serial.print(EEPROM.read(eepIndex++));
              Serial.print("   D->");
              if(EEPROM.read(eepIndex)<10)
              Serial.print('0');
              Serial.print(EEPROM.read(eepIndex++));
              Serial.print('/');
              if(EEPROM.read(eepIndex)<10)
              Serial.print('0');           
              Serial.print(EEPROM.read(eepIndex++));
              Serial.print('/');            
              Serial.print(EEPROM.read(eepIndex++)<<8 | EEPROM.read(eepIndex++));
            }
            else
            {
               Serial.print("---------------------------");
            }

            Serial.print("         ");
}
